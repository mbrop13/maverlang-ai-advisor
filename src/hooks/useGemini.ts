
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';

interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
  }>;
}

export const useGemini = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();
  
  const apiKey = "AIzaSyBTjEoZrwh9LiDFKghBNMBzk_9eaYVJW3o";
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`;

  const extractSymbolsWithAI = async (userMessage: string): Promise<string[]> => {
    try {
      const requestBody = {
        contents: [
          {
            parts: [
              {
                text: `Analiza el siguiente mensaje del usuario y extrae √öNICAMENTE los s√≠mbolos burs√°tiles (tickers) v√°lidos de empresas que cotizan en bolsa.

REGLAS ESTRICTAS:
1. Solo devuelve s√≠mbolos de empresas reales que cotizan en bolsa (AAPL, MSFT, TSLA, GOOGL, AMZN, META, NVDA, etc.)
2. NO incluyas palabras comunes como "sobre", "de", "dame", "informaci√≥n", "an√°lisis", "empresa", etc.
3. Si se menciona el nombre de una empresa conocida, devuelve su s√≠mbolo oficial:
   - Apple ‚Üí AAPL
   - Microsoft ‚Üí MSFT  
   - Tesla ‚Üí TSLA
   - Google/Alphabet ‚Üí GOOGL
   - Amazon ‚Üí AMZN
   - Meta/Facebook ‚Üí META
   - Nvidia ‚Üí NVDA
   - Netflix ‚Üí NFLX
4. M√°ximo 3 s√≠mbolos por respuesta
5. Si no encuentras s√≠mbolos v√°lidos, devuelve una lista vac√≠a
6. Responde SOLO con los s√≠mbolos separados por comas, sin explicaciones

Mensaje del usuario: "${userMessage}"

Ejemplos:
- "informaci√≥n sobre Apple" ‚Üí "AAPL"
- "an√°lisis de Tesla y Microsoft" ‚Üí "TSLA,MSFT"
- "dame datos sobre la empresa" ‚Üí ""
- "c√≥mo est√° NIO hoy" ‚Üí "NIO"`
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.1,
          topK: 1,
          topP: 0.1,
          maxOutputTokens: 50,
        }
      };

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        throw new Error(`Error de API: ${response.status}`);
      }

      const data: GeminiResponse = await response.json();
      
      if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {
        const extractedText = data.candidates[0].content.parts[0].text.trim();
        
        // Si la respuesta est√° vac√≠a o es muy corta, no hay s√≠mbolos v√°lidos
        if (!extractedText || extractedText.length < 2) {
          return [];
        }
        
        // Filtrar y validar s√≠mbolos
        const symbols = extractedText
          .split(',')
          .map(s => s.trim().toUpperCase())
          .filter(s => {
            // Solo s√≠mbolos de 1-5 caracteres que no sean palabras comunes
            const commonWords = ['SOBRE', 'DE', 'DAME', 'INFO', 'ANALISIS', 'EMPRESA', 'DATOS', 'HOY'];
            return s.length >= 1 && s.length <= 5 && !commonWords.includes(s) && /^[A-Z]+$/.test(s);
          })
          .slice(0, 3); // M√°ximo 3 s√≠mbolos
        
        console.log('S√≠mbolos extra√≠dos por IA:', symbols);
        return symbols;
      }
      
      return [];
    } catch (error) {
      console.error('Error extrayendo s√≠mbolos con IA:', error);
      return [];
    }
  };

  const analyzeFinancialData = async (userMessage: string, financialData: any[]) => {
    setIsGenerating(true);
    
    try {
      let context = `Eres Maverlang-AI, un asesor financiero experto y profesional especializado en an√°lisis de mercados. 

CONSULTA DEL USUARIO: "${userMessage}"

`;

      if (financialData.length > 0) {
        context += `DATOS FINANCIEROS DISPONIBLES:
${financialData.map(data => `
**${data.symbol} - ${data.name}:**
- Precio actual: $${data.price?.toFixed(2)}
- Cambio diario: ${data.change > 0 ? '+' : ''}${data.change?.toFixed(2)} (${data.changesPercentage?.toFixed(2)}%)
- Ratio P/E: ${data.pe || 'N/A'}
- Ganancias por acci√≥n (EPS): $${data.eps || 'N/A'}
- Capitalizaci√≥n de mercado: $${(data.marketCap / 1e9)?.toFixed(2)}B
- Sector: ${data.sector || 'N/A'}
- Industria: ${data.industry || 'N/A'}
`).join('')}

INSTRUCCIONES DE AN√ÅLISIS:
Proporciona un an√°lisis financiero completo y profesional que incluya:

1. **Resumen Ejecutivo**: Visi√≥n general de las empresas analizadas
2. **An√°lisis T√©cnico**: Interpretaci√≥n de precios, tendencias y momentum
3. **An√°lisis Fundamental**: Evaluaci√≥n de m√©tricas como P/E, EPS, capitalizaci√≥n
4. **Evaluaci√≥n Sectorial**: Contexto de la industria y sector
5. **Comparativa**: Si hay m√∫ltiples acciones, compararlas detalladamente
6. **Recomendaciones**: Sugerencias de inversi√≥n basadas en perfil conservador a moderado
7. **Gesti√≥n de Riesgo**: Factores de riesgo importantes a considerar
8. **Perspectiva Temporal**: An√°lisis a corto, medio y largo plazo

Usa un lenguaje profesional pero accesible. Incluye emojis apropiados para hacer el an√°lisis m√°s visual y f√°cil de leer.`;
      } else {
        context += `No se encontraron datos financieros espec√≠ficos para la consulta. 

Por favor:
1. Proporciona informaci√≥n educativa general sobre el tema consultado
2. Explica conceptos financieros relevantes
3. Sugiere c√≥mo el usuario podr√≠a obtener la informaci√≥n que busca
4. Ofrece consejos generales de inversi√≥n responsable

Mant√©n un tono profesional y educativo.`;
      }

      const requestBody = {
        contents: [
          {
            parts: [
              {
                text: context
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 3000,
        }
      };

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        throw new Error(`Error de API: ${response.status}`);
      }

      const data: GeminiResponse = await response.json();
      
      if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {
        return data.candidates[0].content.parts[0].text;
      } else {
        throw new Error('Respuesta inv√°lida de la API');
      }
    } catch (error) {
      console.error('Error al generar an√°lisis con Gemini:', error);
      toast({
        title: "Error de IA",
        description: "No se pudo generar el an√°lisis. Los datos financieros est√°n disponibles.",
        variant: "destructive"
      });
      
      return `**ü§ñ An√°lisis de Maverlang-AI**

Hubo un problema t√©cnico con el an√°lisis de IA, pero los datos financieros se obtuvieron correctamente.

**üìä Datos disponibles para an√°lisis:**
${financialData.map(item => {
        const changeIcon = item.change > 0 ? 'üìà' : 'üìâ';
        return `‚Ä¢ **${item.symbol} (${item.name})**: $${item.price?.toFixed(2)} ${changeIcon} ${item.changesPercentage?.toFixed(2)}%`;
      }).join('\n')}

**üí° Recomendaci√≥n:** Por favor, int√©ntalo de nuevo en unos momentos para obtener el an√°lisis completo con IA.

**‚ö†Ô∏è Nota importante:** Siempre consulta con un asesor financiero profesional antes de tomar decisiones de inversi√≥n importantes.`;
    } finally {
      setIsGenerating(false);
    }
  };

  return {
    analyzeFinancialData,
    extractSymbolsWithAI,
    isGenerating
  };
};
